# -*- coding: utf-8 -*-
"""SMS/Email_Spam_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BQB_FRq57yH6BHDjZ4bJh9d_StpLpP10
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d uciml/sms-spam-collection-dataset

import zipfile
ref = zipfile.ZipFile('/content/sms-spam-collection-dataset.zip')
ref.extractall('\content')
ref.close()

import os
import numpy as np
import pandas as pd

df = pd.read_csv('/content/\content/spam.csv', encoding='latin-1')
df.head()

df.shape

"""Steps ===========>

1. Data Cleaning
2. EDA
3. Text preprocessing
4. Model Building
5. Evaluation
6. Improvements
7. Website
8. Deployment

1. Data Cleaning
"""

df.info()

# Drop last 3 columns

df = df.drop(columns=['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis = 1)

df.head()

# Renaming columns

df.rename(columns = {'v1': 'target', 'v2': 'text'}, inplace = True)
df.head()

# Label Encoder

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
df['target'] = encoder.fit_transform(df['target'])
df.head()

# Missing Values
df.isnull().sum()

# Dublicate Values
df.duplicated().sum()

# Remove Duplicates

df = df.drop_duplicates(keep='first')
df.duplicated().sum()

"""2. EDA"""

df['target'].value_counts()

import matplotlib.pyplot as plt

plt.pie(df['target'].value_counts(), labels=['ham','spam'], autopct= "%0.2f")
plt.show()

"""Data is imbalanced

"""

import nltk

nltk.download('punkt')

df['num_chars'] = df['text'].apply(len)
df.head()

df['num_words'] = df['text'].apply(lambda x: len(nltk.word_tokenize(x)))
df.head()

df['num_sents'] = df['text'].apply(lambda x: len(nltk.sent_tokenize(x)))
df.head()

df[['num_chars', 'num_words', 'num_sents']].describe()

# HAM
df[df['target'] == 0][['num_chars', 'num_words', 'num_sents']].describe()

# SPAM
df[df['target'] == 1][['num_chars', 'num_words', 'num_sents']].describe()

import seaborn as sns
sns.set()

plt.figure(figsize=(12,6))
sns.histplot(df[df['target'] == 0]['num_chars'])
sns.histplot(df[df['target'] == 1]['num_chars'], color= 'red')

plt.figure(figsize=(12,6))
sns.histplot(df[df['target'] == 0]['num_words'])
sns.histplot(df[df['target'] == 1]['num_words'], color= 'red')

sns.pairplot(df, hue= 'target')

sns.heatmap(df.corr(), annot=True)

"""3. Data Preprocessing

- Lower case
- Tokenize
- Removing special characters
- Removing stop words and punctuation
- stemming/lemmitization

"""

from nltk.corpus import stopwords
nltk.download('stopwords')
stopwords.words('english')

import string
string.punctuation

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
ps.stem("loving")

def transform_text(text):
  text = text.lower()
  text = nltk.word_tokenize(text)


  y = []
  for i in text:
    if i.isalnum():
      y.append(i)

  text = y[:]
  y.clear()


  for i in text:
    if i not in stopwords.words('english') and i not in string.punctuation:
      y.append(i)

  text = y[:]
  y.clear()

  for i in text:
    y.append(ps.stem(i))

  return " ".join(y)

df['transformed_text'] = df['text'].apply(transform_text)

df.head()

from wordcloud import WordCloud

# SPAM_WordCloud
wc = WordCloud(width = 500, height= 400, min_font_size=10, background_color='white')
spam_wc = wc.generate(df[df['target']==1]['transformed_text'].str.cat(sep =" "))
plt.figure(figsize=(12,8))
plt.imshow(spam_wc)

# HAM_WordCloud
wc = WordCloud(width = 500, height= 400, min_font_size=10, background_color='white')
ham_wc = wc.generate(df[df['target']==0]['transformed_text'].str.cat(sep =" "))
plt.figure(figsize=(12,8))
plt.imshow(ham_wc)

df.head()

spam_corpus = []
for msg in df[df['target'] == 1]['transformed_text'].tolist():
  for word in msg.split():
    spam_corpus.append(word)

len(spam_corpus)

from collections import Counter

Counter(spam_corpus).most_common(30)

sns.barplot(x = pd.DataFrame(Counter(spam_corpus).most_common(30))[0], y = pd.DataFrame(Counter(spam_corpus).most_common(30))[1])
plt.xticks(rotation = 'vertical')
plt.show()

ham_corpus = []
for msg in df[df['target'] == 0]['transformed_text'].tolist():
  for word in msg.split():
    ham_corpus.append(word)

len(ham_corpus)

sns.barplot(x = pd.DataFrame(Counter(ham_corpus).most_common(30))[0], y = pd.DataFrame(Counter(ham_corpus).most_common(30))[1])
plt.xticks(rotation = 'vertical')
plt.show()

"""4. Model Building"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer()

x = cv.fit_transform(df['transformed_text']).toarray()
x.shape

y = df['target'].values
y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=101)

from sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score

gnb = GaussianNB()
mnb = MultinomialNB()
bnb = BernoulliNB()

gnb.fit(x_train, y_train)
y_pred_gnb = gnb.predict(x_test)
print(accuracy_score(y_test, y_pred_gnb))
print("*********"*10)
print(confusion_matrix(y_test, y_pred_gnb))
print("*********"*10)
print(precision_score(y_test, y_pred_gnb))

mnb.fit(x_train, y_train)
y_pred_mnb = mnb.predict(x_test)
print(accuracy_score(y_test, y_pred_mnb))
print("*********"*10)
print(confusion_matrix(y_test, y_pred_mnb))
print("*********"*10)
print(precision_score(y_test, y_pred_mnb))

bnb.fit(x_train, y_train)
y_pred_bnb = bnb.predict(x_test)
print("Accuracy_score\n", accuracy_score(y_test, y_pred_bnb))
print("*********"*10)
print("Confusion_matrix\n",confusion_matrix(y_test, y_pred_bnb))
print("*********"*10)
print("Precision_score\n",precision_score(y_test, y_pred_bnb))

"""Using TF-IDF

"""

from sklearn.feature_extraction.text import TfidfVectorizer


tfidf = TfidfVectorizer()
x = tfidf.fit_transform(df['transformed_text']).toarray()
y = df['target'].values

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state=101)

gnb = GaussianNB()
mnb = MultinomialNB()
bnb = BernoulliNB()

gnb.fit(x_train, y_train)
y_pred_gnb = gnb.predict(x_test)
print(accuracy_score(y_test, y_pred_gnb))
print("*********"*10)
print(confusion_matrix(y_test, y_pred_gnb))
print("*********"*10)
print(precision_score(y_test, y_pred_gnb))

mnb.fit(x_train, y_train)
y_pred_mnb = mnb.predict(x_test)
print(accuracy_score(y_test, y_pred_mnb))
print("*********"*10)
print(confusion_matrix(y_test, y_pred_mnb))
print("*********"*10)
print(precision_score(y_test, y_pred_mnb))

bnb.fit(x_train, y_train)
y_pred_bnb = bnb.predict(x_test)
print("Accuracy_score\n", accuracy_score(y_test, y_pred_bnb))
print("*********"*10)
print("Confusion_matrix\n",confusion_matrix(y_test, y_pred_bnb))
print("*********"*10)
print("Precision_score\n",precision_score(y_test, y_pred_bnb))

"""We choose TFIDF with MultinomialNB as precision is an important metrics

Trying other algorithms/models
"""

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.naive_bayes import MultinomialNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, BaggingClassifier, ExtraTreesClassifier, GradientBoostingClassifier
from xgboost import XGBClassifier

lr = LogisticRegression(solver= 'liblinear', penalty='l1')
svc = SVC(kernel= 'sigmoid', gamma=1.0)
mnb = MultinomialNB()
dt = DecisionTreeClassifier(max_depth=5)
rf = RandomForestClassifier(n_estimators=50, random_state=2)
ada = AdaBoostClassifier(n_estimators=50, random_state=2)
bc = BaggingClassifier(n_estimators=50, random_state=2)
etc = ExtraTreesClassifier(n_estimators=50, random_state=2)
gbc = GradientBoostingClassifier(n_estimators=50, random_state=2)
xgb = XGBClassifier(n_estimators=50, random_state=2)

clfs = {
    'LR' : lr,
    'SVC' : svc,
    'NB' : mnb,
    'DT' : dt,
    'RF' : rf,
    'ADA' : ada,
    'BC' : bc,
    'ETC' : etc,
    'GBC' : gbc,
    'XGB' : xgb
}

def train_classifier(clf, x_train, y_train, x_test, y_test):
  clf.fit(x_train, y_train)
  y_pred = clf.predict(x_test)
  accuracy = accuracy_score(y_test, y_pred)
  precision = precision_score(y_test, y_pred)

  return accuracy, precision

accuracy_scores = []
precision_scores = []

for name, clf in clfs.items():
  current_accuracy, current_precision = train_classifier(clf, x_train, y_train, x_test, y_test)

  print("For", name)
  print("Accuracy", current_accuracy)
  print("Precision", current_precision)

  accuracy_scores.append(current_accuracy)
  precision_scores.append(current_precision)

performance_df = pd.DataFrame({'Algorithm': clfs.keys(), 'Accuracy':accuracy_scores, 'Precision':precision_scores}).sort_values('Precision', ascending=False)
performance_df

performance_df1 = pd.melt(performance_df, id_vars='Algorithm')
performance_df1

sns.barplot(x  ='Algorithm', y='value', hue='variable', data =performance_df1, )
plt.xticks(rotation= 'vertical')
plt.show()

tfidf = TfidfVectorizer(max_features= 3000)
x = tfidf.fit_transform(df['transformed_text']).toarray()
y = df['target'].values

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state=101)

accuracy_scores = []
precision_scores = []

for name, clf in clfs.items():
  current_accuracy, current_precision = train_classifier(clf, x_train, y_train, x_test, y_test)

  print("For", name)
  print("Accuracy", current_accuracy)
  print("Precision", current_precision)

  accuracy_scores.append(current_accuracy)
  precision_scores.append(current_precision)

temp_df = pd.DataFrame({'Algorithm': clfs.keys(), 'Accuracy_new':accuracy_scores, 'Precision_new':precision_scores}).sort_values('Precision_new', ascending=False)
temp_df

df_new = pd.concat([performance_df, temp_df], axis = 1, join='inner')
df_new

df_1= pd.merge(left = performance_df, right =temp_df, on = 'Algorithm')
df_1

import pickle
pickle.dump(tfidf, open('vectorizer.pkl', 'wb'))
pickle.dump(mnb, open('model.pkl', 'wb'))





























